#!/usr/bin/env python

# Print a table that converts from an ADC reading for the MCP9701A
# temperature sensor with the 1.5V reference, to a scaled temperature
# value.

filebasename = 'bsp-MCP9701A-temperature-scale'

import sys

def t_to_v(t):
    return (t * 0.01) + 0.5

def v_to_adc(v):
    return int((v / 1.5) * 4096)

def t_to_ti(t):
    return int(t * 2.0)

mintemp = -30.0
maxtemp =  70.5

h_file   = file(filebasename + '.h', 'w')
inc_file = file(filebasename + '.inc', 'w')

print >>inc_file, "/* Auto-generated by %s */\n" % sys.argv[0]
print >>h_file  , "/* Auto-generated by %s */\n" % sys.argv[0]

print >>inc_file, "#include \"" + filebasename + ".h\""
print >>inc_file, "static const struct TempConversion tempconversions[NCONVERSIONS] = {"
t = mintemp

nconversions = 0

while t <= maxtemp:
    vmin = t_to_v(t)
    vmax = t_to_v(t+0.5)
    adcmin = v_to_adc(vmin)
    adcmax = v_to_adc(vmax) - 1
    ti = int(t * 2.0);
    print >>inc_file, \
        "\t{ %4d, %4d, %3d, }, /* %5.1fC, %.5fV, %.5fV */" % \
        (adcmin, adcmax, ti, t, vmin, vmax)
    t += 0.5
    nconversions += 1

print >>inc_file, "};"

print >>h_file, "#define MINTI        %d" % t_to_ti(mintemp)
print >>h_file, "#define LOWTI        (MINTI-1)"
print >>h_file, "#define MINADC       %d" % v_to_adc(t_to_v(mintemp))
print >>h_file, "#define MAXTI        %d" % t_to_ti(maxtemp)
print >>h_file, "#define HIGHTI       (MAXTI+1)"
print >>h_file, "#define MAXADC       %d" % v_to_adc(t_to_v(maxtemp))
print >>h_file, "#define NCONVERSIONS %d" % nconversions
